
-----------------------------------------------------------------

yum install docker
docker pull nginx
docker run -it --name nginx-app -p 8080:80 nginx:latest /bin/bash
apt update -y
apt install apache2
service nginx start/ service apache2 start
ctrl p+q
docker ps -a
docker exec -it contname /bin/bash

--------------------------------------------------------------------------
terraform

sudo dnf install -y dnf-plugins-core
     sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    sudo dnf -y install terraform
   80  terraform init
   81  aws configure
   82  vim provider.tf
   83  terraform fmt
   84  terraform validate
terraform plan
terraform apply

provider "aws" {
  region = "us-east-1"
}

#security group
resource "aws_security_group" "web_access" {
  name        = "web_access"
  description = "allow ssh and http"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }


}
#security group end here


resource "aws_instance" "web-server" {
  ami               = "ami-07860a2d7eb515d9a"
  availability_zone = "us-east-1a"
  instance_type     = "t3.micro"
  security_groups   = ["${aws_security_group.web_access.name}"]
  tags = {
    Name     = "hello-World"
    Stage    = "testing"
    Location = "INDIA"
  }

}

---------------------------------------------------------------------------------------
ansible playbook-
multiuser.yaml

---
- name: create multiple users
  hosts: all
  tasks:
    - name: create multiple users
      user:
        name: "{{ item }}"
        state: present
      with_items:
        - sanjaya
        - Dracula
        - ironman
        - jahnavi

anotherserver.yaml

---
- name: configure a simple apache server
  hosts: all
  vars:
    - my_pkg: httpd
    - my_svc: httpd
    - destination: /var/www/html/index.html
    - my_content: "Apache servers using Ansible with deployment server"
    - rule: http
  tasks:
    - name: install my package
      yum:
        name: "{{ my_pkg }}"
        state: present

    - name: start my service
      service:
        name: "{{ my_svc }}"
        state: started
        enabled: true

    - name: create index.html file
      copy:
        content: "{{ my_content }}"
        dest: "{{ destination }}"

yum install ansible-core
    4  aws configure
    5  ssh-keygen
    6  yum update -y
    7  cd .ssh
    8  vim authorized_keys
cd /etc/ansible
   17  ll
   18  vim ansible.cfg
   19  ll
   20  vim hosts
ansible all --list-hosts
   23  vim create.yaml
   24  ansible-playbook create.yaml --syntax-check
in ans-one
ssh-keygen
    2  cd .ssh
    3  cat id_rsa.pub
    4  ip a s
    5  vim authorized_keys
    6  cd
    7  tail /etc/passwd
    8  systemctl status httpd
----------------------------------------------------------------------------------------------------

-------AMI to another region --------------

Add one instance in N.Virg.
with port 80(http) allowed
   yum install httpd -y
      echo "This is my website" >> /var/www/html/index.html
     systemctl start httpd
  systemctl enable httpd
 curl http://localhost:80

stop it before creating ami
now to create ami 
select instance and action and create image -> name and description -> create
now go to ami and action -> copy -> give destination region ->default -> copy
now create a duplicate session and move to ohio and click ami -> launch instance from ami and 
instance name and make sure to add http securtiy group 
and connection check 
sudo su -
rpmquery httpd
curl http://localhost:80
it works
